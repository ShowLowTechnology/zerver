{"body":"Zerver is a lightweight Node.js-based webserver that lets you seamlessly make server API calls as if they were a library on the client. The goal is to provide a developer-focused toolset and remove all the boilerplate involved in serving a webapp.\r\n\r\n### Install\r\n\r\n```sh\r\nnpm install -g zerver\r\n# or add zerver to your package.json dependencies\r\n```\r\n\r\n# Basic usage\r\n\r\nLet's say you have a directory of this structure.\r\n\r\n```\r\nwebsite-dir/index.html\r\nwebsite-dir/zerver/MyAPI.js\r\n```\r\n\r\nEverything in `website-dir` will be served as static content except for code in `zerver/` which will run on the server.\r\n\r\n```js\r\n// in website-dir/zerver/MyAPI.js\r\nexports.logStuff = function (str) {\r\n    console.log(str); // 'hi from client'\r\n    callback('hi from server');\r\n};\r\n```\r\n\r\n```html\r\n<!-- in website-dir/index.html -->\r\n<script src=\"zerver/MyAPI.js\"></script>\r\n<script>\r\n    MyAPI.logStuff('hi from client', function (str) {\r\n        console.log(str); // \"hi from server\"\r\n    });\r\n</script>\r\n```\r\n\r\n```sh\r\n# run the server\r\nzerver website-dir\r\n# go to http://localhost:8888/ to view the magic\r\n```\r\n\r\n### What just happened?\r\n\r\n`MyAPI.logStuff` automatically serializes the arguments of the function call and makes an AJAX request to the server. The server runs the function in `website-dir/zerver/MyAPI.js` and responds to the client in a similar way.\r\n\r\nAny amount of arguments can be used in the function calls as long as they are JSON stringify-able (with the exception of the callback function).\r\n\r\nNote: any server code in a subdirectory of `website-dir/zerver` will not be available for import on the client allowing for libraries of private server functionality.\r\n\r\n### Require syntax\r\n\r\n```html\r\n<!-- in website-dir/index.html -->\r\n<script src=\"/zerver/require.js\"></script>\r\n<script>\r\n    var MyAPI = require('MyAPI');\r\n    MyAPI.logStuff('hi from client', function (str) {\r\n        console.log(str); // \"hi from server\"\r\n    });\r\n</script>\r\n```\r\n\r\n# Tools\r\n\r\n### Debug mode\r\n\r\n```sh\r\nzerver -d website-dir\r\n```\r\n\r\nZerver will automatically reload the server modules when any server-side code is edited. This is allows for rapid development and testing of server-side code.\r\n\r\n### Auto-refresh mode\r\n\r\n```sh\r\nzerver -dr website-dir\r\n```\r\n\r\nAny webpage being viewed that has a Zerver script on it (`website-dir/index.html`) will automatically refresh when any of its code is edited. You can edit code and immediately see feedback on how it effects your running webapp.\r\n\r\n# ExpressJS integration\r\n\r\nZerver integrates well with Express, providing the same functionality to any existing webapp.\r\n\r\n```js\r\n// \"app\" is an ExpressJS app instance\r\nvar zerver = require('zerver');\r\napp.use( zerver.middleware('path/to/zerver/scripts', 'url/to/zerve/at') );\r\n```\r\n\r\nAlong with the rest of your Express app, Zerver scripts will be accessible the specified path (`url/to/zerve/at`) for importing into your client-side code.\r\n\r\n# Node module\r\n\r\nA convenient tool for testing and server-to-server integration is the NodeJS Zerver module.\r\n\r\n```js\r\nvar zerver = require('zerver');\r\n\r\nzerver.get('http://localhost:8888/zerver/', function (myzerver) {\r\n    myzerver.MyAPI.logStuff('hi from another server', function (str, data) {\r\n        console.log(str); // \"hi from server\"\r\n    });\r\n});\r\n```\r\n\r\n# Advanced usage\r\n\r\n### Zerver options\r\n\r\n```sh\r\n# run server on a different port\r\nzerver --port=8000 website-dir\r\n```\r\n\r\n```sh\r\n# automatically append a comment timestamp whenever\r\n# a HTML5 cache.manifest is requested\r\nzerver -d --manifest=path/to/cache.manifest website-dir\r\n\r\n# in production mode this will always have\r\n# the timestamp of the time of deploy\r\nzerver --manifest=path/to/cache.manifest website-dir\r\n```\r\n\r\n### Cross origin\r\n\r\nZerver can automatically make a script available to multiple host origins. This is especially useful if you are including a Zerver script from a subdomain of your webapp.\r\n\r\n```js\r\n// in website-dir/zerver/MyAPI.js\r\n\r\n// all any website to include your zerver script\r\nexports._crossOrigin = '*';\r\n```\r\n\r\nThe value of `exports._crossOrigin` is exactly what will be served as the `Allow-Access-Control-Origin` header for cross origin requests if acceptable.\r\n\r\n### Script names\r\n\r\nZerver scripts can be globalised on the client under whatever name you please. If you are afraid of object name collisions simply define the query argument `name` for the script and it will be globalised as such.\r\n\r\n```html\r\n<!-- in website-dir/index.html -->\r\n<script src=\"zerver/MyAPI.js?name=SomeOtherAPI\"></script>\r\n<script>\r\n    SomeOtherAPI.logStuff('hi from client', function (str) {\r\n        console.log(str); // \"hi from server\"\r\n    });\r\n</script>\r\n```\r\n### Error handling\r\n\r\n```html\r\n<!-- in website-dir/index.html -->\r\n<script src=\"zerver/MyAPI.js\"></script>\r\n<script>\r\n    MyAPI.logStuff('hi from client', function (str) {\r\n        if (this.error) {\r\n            // API call failed for some reason\r\n            if (this.errorType === 'library') {\r\n                // API error in your code\r\n                // this.errorString will have a description\r\n                // this.errorString will be the exception if thrown\r\n                console.log(this.errorSting);\r\n            }\r\n            else if (this.errorType === 'zerver') {\r\n                // http error or zerver failed\r\n                console.log(this.errorSting);\r\n            }\r\n            return;\r\n        }\r\n        console.log(str); // \"hi from server\"\r\n    });\r\n</script>\r\n```\r\n\r\n# Example apps\r\n\r\n[Basic app](https://github.com/jairajs89/zerver/tree/master/examples/basic-app)\r\n\r\n[Express app](https://github.com/jairajs89/zerver/tree/master/examples/express-app)\r\n","google":"UA-4073712-12","tagline":"client-integrated webapp server","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Zerver"}